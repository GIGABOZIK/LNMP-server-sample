# # SERVICES
services:
# ## web-nginx
    web:
        container_name: web-nginx
        image: nginx:alpine
        volumes:
            #` NGINX-LOGS
            - ./running/var/log/nginx:/var/log/nginx
            #` NGINX-CFG
            - ./build/etc/nginx/nginx.conf:/etc/nginx/nginx.conf:ro #` Базовый конфиг NGINX
            - ./build/etc/nginx/conf.d:/etc/nginx/conf.d:ro         #` Дополнительные настройки (по умолчанию подключаются в базовый конфиг в контекст http)
            - ./build/etc/nginx/snippets:/etc/nginx/snippets:ro     #` Шаблоны настроек (опционально) - Реализуют принцип DRY
            #` DOMAINS
            - ./apps/domains:/var/www
        ports:
            - "80:80"
            - "443:443"
        depends_on:
            - php
        restart: unless-stopped
# ## cgi-php-fpm
    php:
        container_name: cgi-php-fpm
        build:
            context: ./build/dockerfiles
            dockerfile: php.Dockerfile
        volumes:
            #` DOMAINS
            - ./apps/domains:/var/www
        # env_file: .env #` * gitignore
        env_file: .env-example
        depends_on:
            - db
        restart: unless-stopped
# ## db-mariadb
    db:
        container_name: db-mariadb
        image: mariadb:latest
        volumes:
            #` DB-DATA
            # - ./apps/db-mariadb-data:/var/lib/mysql #` * For saving
            - ./running/db-mariadb-data:/var/lib/mysql #` * For debugging
            #- ./build/initial/sql-scripts/:/docker-entrypoint-initdb.d/ #` Initial SQL-scripts
        command:
            - --character-set-server=utf8mb4
            - --collation-server=utf8mb4_unicode_ci
            - --skip-character-set-client-handshake
        # env_file: .env #` * gitignore
        env_file: .env-example
        ports:
            - "3306:3306" #` Можно открыть порт БД для подключения через иные СУБД (рекомендуется)
        restart: unless-stopped
# ## dbms-phpmyadmin
    phpmyadmin:
        container_name: dbms-phpmyadmin
        image: phpmyadmin:latest
        #environment:
            #PMA_HOST: mariadb                          #` Имя хоста БД. Если соответствующий service называется db, то указывать не нужно
            #PMA_USER: example_user                     #` (*в целях безопасности использовать только локально*) Данные для автоматической аутентификации PhpMyAdmin
            #PMA_PASSWORD: example_password             #` (*в целях безопасности использовать только локально*) Данные для автоматической аутентификации PhpMyAdmin
            #MYSQL_ROOT_PASSWORD: example_root_password #` Пароль root пользователя для PhpMyAdmin для выполнения административных операций в базе данных
        # env_file: .env #` gitignore
        # env_file: .env-example
        ports:
            - "8001:80"
        restart: unless-stopped
#
# ### Some Notes
# ```bash: sudo docker-compose down && sudo docker-compose up```
# ```ps: docker-compose down; docker-compose up```
#
# ```bash: sudo docker-compose down && sudo rm -r ./running && sudo docker-compose up```
# ```ps: docker-compose down; rm "./running" -Recurse; docker-compose up```
#
# ```bash: sudo docker-compose down && sudo rm -r ./running && sudo cp -r ./build ./running && sudo docker-compose up```
# ```ps: docker-compose down; rm "./running" -Recurse; Copy-Item -Path "./build" -Destination "./running" -Recurse; docker-compose up```
#
# ## certbot
#     certbot:
#         container_name: certbot
#         image: certbot/certbot
#         volumes:
#             #` CERT
#             - ./build/etc/letsencrypt:/etc/letsencrypt
#             #` DOMAINS
#             - ./apps/domains:/var/www
#         command: certonly --webroot --webroot-path=/var/www/example.com --email example@mail.ru --agree-tos --no-eff-email -d example.com
#         depends_on:
#             - web
#         restart: unless-stopped
# ###